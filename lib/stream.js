// Generated by CoffeeScript 1.4.0
var Capture, Pcm, Playback, alsa, stream,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

stream = require('stream');

alsa = require('./constants');

Pcm = require('../build/Release/alsa').Pcm;

Capture = (function(_super) {

  __extends(Capture, _super);

  function Capture(device, channels, rate, format, access, latency, software_resampling) {
    this.device = device != null ? device : 'default';
    if (channels == null) {
      channels = 2;
    }
    if (rate == null) {
      rate = 44100;
    }
    if (format == null) {
      format = alsa.FORMAT_S16_LE;
    }
    if (access == null) {
      access = alsa.ACCESS_RW_INTERLEAVED;
    }
    if (latency == null) {
      latency = 500;
    }
    if (software_resampling == null) {
      software_resampling = false;
    }
    stream.Readable.call(this);
    this.pcm = new Pcm(channels, rate, format, access, latency * 1000, software_resampling);
  }

  Capture.prototype._read = function() {
    var _this = this;
    if (this.pcm.opened) {
      return false;
    }
    return this.pcm.open(this.device, alsa.STREAM_CAPTURE, function(err) {
      if (err != null) {
        throw err;
      } else {
        return _this.pcm.read(function(err, frames) {
          if (err != null) {
            throw err;
          } else {
            if (!_this.push(frames)) {
              return _this.pcm.close();
            }
          }
        });
      }
    });
  };

  return Capture;

})(stream.Readable);

Playback = (function(_super) {

  __extends(Playback, _super);

  function Playback(device, channels, rate, format, access, latency) {
    var _this = this;
    this.device = device != null ? device : 'default';
    if (channels == null) {
      channels = 2;
    }
    if (rate == null) {
      rate = 44100;
    }
    if (format == null) {
      format = alsa.FORMAT_S16_LE;
    }
    if (access == null) {
      access = alsa.ACCESS_RW_INTERLEAVED;
    }
    if (latency == null) {
      latency = 500;
    }
    stream.Writable.call(this);
    this.pcm = new Pcm(channels, rate, format, access, latency * 1000);
    this.on('unpipe', function() {
      if (_this.pcm.opened) {
        return _this.pcm.close();
      }
    });
  }

  Playback.prototype._write = function(chunk, encoding, callback) {
    var _this = this;
    if (this.pcm.opened) {
      return this.pcm.write(chunk, callback);
    }
    return this.pcm.open(this.device, alsa.STREAM_PLAYBACK, function(err) {
      if (err != null) {
        throw err;
      } else {
        return _this.pcm.write(chunk, callback);
      }
    });
  };

  return Playback;

})(stream.Writable);

exports.Capture = Capture;

exports.Playback = Playback;
